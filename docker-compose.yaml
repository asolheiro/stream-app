services:
  go-transcoder:
    container_name: go-transcoder
    build:
      context: ./go-transcoder
      dockerfile: Dockerfile
    volumes:
      - ./media/uploads:/media/uploads
    environment:
        DEBUG: "true"
        POSTGRES_USER: "admin"
        POSTGRES_PASSWORD: "root"
        POSTGRES_DB: "converter"
        POSTGRES_HOST: "postgres"
        POSTGRES_SSL_MODE: "disable"
        RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672"
        CONVERSION_EXCHANGE: "conversionExchange"
        CONVERSION_QUEUE: "videoConversion_queue"
        CONVERSION_KEY: "videoConversion"
        CONFIRMATION_EXCHANGE: "confirmationExchange"
        CONFIRMATION_QUEUE: "conversionConfirmation_queue"
        CONFIRMATION_KEY: "videoConfirmation"
    tty: true
    stdin_open: true
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  admin-page:
    container_name: admin-page
    build:
      context: ./py-django
      dockerfile: Dockerfile
    volumes:
      - ./media:/media/
      - ./media/thumbnails:/py-django/media/thumbnails/
      - ./media/supervisor:/var/log/supervisor/
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:8000/healthcheck"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      postgres:
        condition: service_healthy
    dns:
      - 8.8.8.8
      - 8.8.4.4
    environment:
      ASSETS_URL: http://localhost:9000
      CONVERSION_EXCHANGE: "conversionExchange"
      CONVERSION_KEY: "videoConversion"
      CONVERSION_QUEUE: "videoConversion_queue"
      CONFIRMATION_EXCHANGE: "confirmationExchange"
      CONFIRMATION_KEY: "videoConfirmation"
      CONFIRMATION_QUEUE: "conversionConfirmation_queue"
      DATABASE_URL: postgres://admin:root@postgres:5432/backoffice
      DJANGO_SUPERUSER_USERNAME: admin
      DJANGO_SUPERUSER_EMAIL: user@admin.com
      DJANGO_SUPERUSER_PASSWORD: root
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/" 

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s       
      timeout: 10s        
      retries: 5          
      start_period: 10s   

  nginx:
    container_name: nginx
    image: nginx:1.19.10-alpine
    ports:
      - 9000:80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./media:/media/

  nextjs-frontend:
    container_name: nextjs-front
    build:
      context: ./next-front
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./next-front:/home/node/app
    environment:
      DJANGO_API_URL: http://admin-page:8000/api
    depends_on:
      admin-page:
        condition: service_healthy
    

  postgres:
    container_name: postgres
    image: postgres:17.0-alpine3.20
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: "admin"
      POSTGRES_PASSWORD: "root"
      POSTGRES_DB: "database"
    volumes:
      - ./.docker/postgres:/var/lib/postgresql/data
      - ./go-transcoder/init_database.sql:/docker-entrypoint-initdb.d/init_converterDatabase.sql
      - ./py-django/init_database.sql:/docker-entrypoint-initdb.d/init_backofficeDatabase.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d database"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    ports:
      - "8888:80"
    environment:
      PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: 'False'
      PGADMIN_DEFAULT_EMAIL: "user@admin.com"
      PGADMIN_DEFAULT_PASSWORD: "root"
      POSTGRES_USER: "admin"
      POSTGRES_PASSWORD: "root"
      POSTGRES_DB: "database"
    volumes:
      - ./servers.json:/pgadmin4/servers.json
    depends_on:
      postgres:
        condition: service_healthy